package emailapp;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

class InitialPage implements ActionListener {
  private String firstName = "";
  private String lastName = "";
  private String department = "";
  private String email = "";
  private String password = "";
  private int length = 10;

  JFrame frame = new JFrame();
  JLabel msgLabel = new JLabel("E-MAIL GENERATOR");
  JLabel firstNameLabel = new JLabel("Name: ");
  JLabel lastNameLabel = new JLabel("Last Name: ");
  JLabel departmentLabel = new JLabel("Department: ");
  JButton submitButton = new JButton("SUBMIT");
  JButton resetButton = new JButton("RESET");
  JTextField firstNameField = new JTextField();
  JTextField lastNameField = new JTextField();
  JTextField departmentField = new JTextField();

  // Constructor
  InitialPage() {
    // Frame Specs
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setLayout(null);
    frame.setVisible(true);
    frame.setTitle("E-MAIL APPLICATION");
    frame.setSize(600, 400);
    frame.setResizable(false);
    frame.setLocationRelativeTo(null);
    // Label Specs
    msgLabel.setBounds(190, -100, 450, 250);
    msgLabel.setFont(new Font(null, Font.BOLD, 22));
    frame.add(msgLabel);

    firstNameLabel.setBounds(30, -20, 300, 200);
    firstNameLabel.setFont(new Font(null, Font.BOLD, 15));
    frame.add(firstNameLabel);

    lastNameLabel.setBounds(30, 30, 300, 200);
    lastNameLabel.setFont(new Font(null, Font.BOLD, 15));
    frame.add(lastNameLabel);

    departmentLabel.setBounds(30, 80, 300, 200);
    departmentLabel.setFont(new Font(null, Font.BOLD, 15));
    frame.add(departmentLabel);
    // Button Specs
    submitButton.setBounds(180, 250, 100, 30);
    submitButton.addActionListener(this);
    submitButton.setFocusable(false);
    submitButton.setBackground(Color.GREEN);
    submitButton.setOpaque(true);
    frame.add(submitButton);

    resetButton.setBounds(300, 250, 100, 30);
    resetButton.addActionListener(this);
    resetButton.setFocusable(false);
    resetButton.setBackground(Color.ORANGE);
    resetButton.setOpaque(true);
    frame.add(resetButton);
    // Textfield Specs
    firstNameField.setBounds(85, 70, 325, 25);
    frame.add(firstNameField);

    lastNameField.setBounds(120, 120, 290, 25);
    frame.add(lastNameField);

    departmentField.setBounds(125, 170, 285, 25);
    frame.add(departmentField);
  } // end Constructor

  @Override
  public void actionPerformed(ActionEvent e) {
    // Reset button
    if (e.getSource() == resetButton) {
      firstNameField.setText("");
      lastNameField.setText("");
      departmentField.setText("");
      JOptionPane.showMessageDialog(null, "<html><font size='4'>Everything was cleared!", "Reset！",
          JOptionPane.INFORMATION_MESSAGE);
    }

    // Submit button
    if (e.getSource() == submitButton) {
      // Check if all the fields were filled
      if ((firstNameField.getText().isEmpty()) || (lastNameField.getText().isEmpty())
          || (departmentField.getText().isEmpty())) {
        JOptionPane.showMessageDialog(null, "<html><font size='3'>ENTER ALL THE NECESSARY INFORMATION！", "Warning!",
            JOptionPane.ERROR_MESSAGE);
      } else {
        // Get the data from the textfields
        this.firstName = firstNameField.getText();
        this.lastName = lastNameField.getText();
        this.department = departmentField.getText();
        // Generate the e-mail
        this.email = setEmail(this.firstName, this.lastName, this.department);
        // Generate the password
        this.password = setPassword(this.length);
        // Add the data to the database
        try {
          String SQLCommand = "";
          SQLCommand = "INSERT INTO emails (email, password) VALUES('" + email + "','" + password + "')";
          dbManipulation.executeSQLCommand(SQLCommand, this.email, this.password);
        } catch (Exception e1) {
          // TODO 自動生成された catch ブロック
          e1.printStackTrace();
        }
        // Close this page
        frame.dispose();
        // Opens up the final page
        FinalPage finalPage = new FinalPage(this.email, this.password);
      }
    } // end submitButton
  } // end actionPerformed

  // Generate e-mail function
  private String setEmail(String firstName, String lastName, String department) {
    String emailPattern = "@company.com";
    // Receives the firstname, lastname and department and then returns the e-mail
    String email = (firstName + lastName + "." + department + emailPattern).toLowerCase();
    return email;
  } // end setEmail

  // Generate password function
  private String setPassword(int length) {
    // Receives the length, generates a random password and return it as a String
    Random randomNumber = new Random();
    String passwordSet = "ABCDEFGHIJLKMNOPQRSTUVXZW0123456789";
    char[] password = new char[length];
    for (int i = 0; i < password.length; i++) {
      password[i] = passwordSet.charAt(randomNumber.nextInt(passwordSet.length()));
    }
    return new String(password);
  } // end setPassword
} // end class
